module(
    name = "monorepo",
    repo_name = "com_github_shaldengeki_monorepo",
)

bazel_dep(name = "aspect_bazel_lib", version = "2.21.1")

bazel_dep(name = "platforms", version = "1.0.0", dev_dependency = True)

bazel_dep(name = "toolchains_protoc", version = "0.5.0")
bazel_dep(name = "protobuf", version = "31.1")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "rules_python", version = "1.5.4")
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "aspect_rules_js", version = "2.5.0")
bazel_dep(name = "aspect_rules_ts", version = "3.7.0")
bazel_dep(name = "aspect_rules_jest", version = "0.23.3")
bazel_dep(name = "aspect_rules_webpack", version = "0.17.1")
bazel_dep(name = "rules_pkg", version = "1.1.0")
bazel_dep(name = "rules_go", version = "0.57.0")
bazel_dep(name = "gazelle", version = "0.45.0")
bazel_dep(name = "rules_python_gazelle_plugin", version = "1.5.4")
bazel_dep(name = "rules_java", version = "8.15.1")
bazel_dep(name = "contrib_rules_jvm", version = "0.29.0")
bazel_dep(name = "rules_cc", version = "0.2.2")
bazel_dep(name = "googletest", version = "1.17.0")
bazel_dep(name = "rules_buf", version = "0.5.2")

#### Protoc
protoc = use_extension("@toolchains_protoc//protoc:extensions.bzl", "protoc")
protoc.toolchain(
    # Creates a repository to satisfy well-known-types dependencies such as
    # deps=["@com_google_protobuf//:any_proto"]
    google_protobuf = "com_google_protobuf",
    # Pin to any version of protoc
    version = "v31.1",
)
use_repo(protoc, "com_google_protobuf", "toolchains_protoc_hub")

register_toolchains("@toolchains_protoc_hub//:all")

register_toolchains("//tools/protoc:all")

buf = use_extension("@rules_buf//buf:extensions.bzl", "buf")
buf.toolchains(version = "v1.57.0")
use_repo(buf, "rules_buf_toolchains")

#### Python
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    python_version = "3.13.4",
)
use_repo(python, "python_3_13_4")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "py_deps",
    python_version = "3.13.4",
    requirements_lock = "//:requirements.lock.txt",
)
use_repo(pip, "py_deps")

#### rules_oci
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "ubuntu_image",
    digest = "sha256:67211c14fa74f070d27cc59d69a7fa9aeff8e28ea118ef3babc295a0428a6d21",
    image = "ubuntu",
    platforms = [
        "linux/arm64/v8",
        "linux/amd64",
    ],
)
oci.pull(
    name = "python3_image",
    digest = "sha256:5c73034c2bc151596ee0f1335610735162ee2b148816710706afec4757ad5b1e",
    image = "python",
    platforms = [
        "linux/386",
        "linux/amd64",
        "linux/arm/v5",
        "linux/arm/v7",
        "linux/arm64/v8",
        "linux/ppc64le",
        "linux/s390x",
    ],
)
oci.pull(
    name = "nginx_debian_slim",
    digest = "sha256:6b06964cdbbc517102ce5e0cef95152f3c6a7ef703e4057cb574539de91f72e6",
    image = "docker.io/library/nginx",
    platforms = [
        "linux/386",
        "linux/amd64",
        "linux/arm/v5",
        "linux/arm/v7",
        "linux/arm64/v8",
        "linux/ppc64le",
        "linux/s390x",
    ],
)
oci.pull(
    name = "nginx_mainline_alpine",
    digest = "sha256:42a516af16b852e33b7682d5ef8acbd5d13fe08fecadc7ed98605ba5e3b26ab8",
    image = "docker.io/library/nginx",
    platforms = [
        "linux/386",
        "linux/amd64",
        "linux/arm/v5",
        "linux/arm/v7",
        "linux/arm64/v8",
        "linux/ppc64le",
        "linux/s390x",
    ],
)
use_repo(
    oci,
    "nginx_debian_slim",
    "nginx_debian_slim_linux_386",
    "nginx_debian_slim_linux_amd64",
    "nginx_debian_slim_linux_arm64_v8",
    "nginx_debian_slim_linux_arm_v5",
    "nginx_debian_slim_linux_arm_v7",
    "nginx_debian_slim_linux_ppc64le",
    "nginx_debian_slim_linux_s390x",
    "nginx_mainline_alpine",
    "nginx_mainline_alpine_linux_386",
    "nginx_mainline_alpine_linux_amd64",
    "nginx_mainline_alpine_linux_arm64_v8",
    "nginx_mainline_alpine_linux_arm_v5",
    "nginx_mainline_alpine_linux_arm_v7",
    "nginx_mainline_alpine_linux_ppc64le",
    "nginx_mainline_alpine_linux_s390x",
    "python3_image",
    "python3_image_linux_386",
    "python3_image_linux_amd64",
    "python3_image_linux_arm64_v8",
    "python3_image_linux_arm_v5",
    "python3_image_linux_arm_v7",
    "python3_image_linux_ppc64le",
    "python3_image_linux_s390x",
    "ubuntu_image",
    "ubuntu_image_linux_amd64",
    "ubuntu_image_linux_arm64_v8",
)

#### Javascript
npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    # To update, run bazel run -- @pnpm//:pnpm --dir $PWD install --lockfile-only
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir /home/runner/work/rules_js/rules_js install
use_repo(pnpm, "pnpm")

rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext", dev_dependency = True)
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")

#### Golang
go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.module(
    # build_file_proto_mode = "disable",
    path = "google.golang.org/grpc",
    sum = "h1:+TW+dqTd2Biwe6KKfhE5JpiYIBWq865PhKGSXiivqt4=",
    version = "v1.75.0",
)
go_deps.module(
    path = "golang.org/x/net",
    sum = "h1:lat02VYK2j4aLzMzecihNvTlJNQUq316m2Mr9rnM6YE=",
    version = "v0.43.0",
)
go_deps.module(
    path = "golang.org/x/text",
    sum = "h1:rhazDwis8INMIwQ4tpjLDzUhx6RlXqZNPEM0huQojng=",
    version = "v0.28.0",
)
go_deps.module(
    path = "github.com/stretchr/testify",
    sum = "h1:7s2iGBzp5EwR7/aIZr8ao5+dra3wiQyKjjFuvgVKu7U=",
    version = "v1.11.1",
)
use_repo(
    go_deps,
    "com_github_stretchr_testify",
    "org_golang_google_grpc",
    "org_golang_x_net",
    "org_golang_x_text",
)

rules_hugo_extension = use_extension("//tools/build_rules/rules_hugo:defs.bzl", "rules_hugo_extension")
use_repo(rules_hugo_extension, "rules_hugo")

hugo_extension = use_extension("//tools/build_rules/hugo:defs.bzl", "hugo_extension")
use_repo(hugo_extension, "hugo")
