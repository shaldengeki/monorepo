name: Test

on:
  pull_request:
    branches: main
  push:
    branches: main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Caches and restores the bazelisk download directory, the bazel build directory.
      - name: Cache bazel
        uses: actions/cache/restore@v4
        env:
          cache-name: bazel-cache
        with:
          path: |
            ~/.cache/bazelisk
            ~/.cache/bazel
            ~/.cache/bazel-repo
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.ref }}-${{ github.sha }}
          # Pull caches from:
          # - The current sha,
          # - The current branch,
          # - base branch
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-${{ github.ref }}-${{ github.sha }}
            ${{ runner.os }}-${{ env.cache-name }}-${{ github.ref }}-
            ${{ runner.os }}-${{ env.cache-name }}-refs/heads/${{ github.base_ref }}-
      - name: Checkout
        uses: actions/checkout@v4
      - name: Ensure there are no gazelle diffs
        run: bazel --bazelrc=.github/workflows/ci.bazelrc --bazelrc=.bazelrc run //:gazelle -- -mode=diff .
      - name: bazel test //...
        run: bazel --bazelrc=.github/workflows/ci.bazelrc --bazelrc=.bazelrc test //...
      - name: Validate MODULE.bazel.lock
        run: git diff --quiet MODULE.bazel.lock
  validate-fly:
    runs-on: ubuntu-latest
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Validate fly configs
        run: find . -name fly.toml | xargs -n 1 flyctl config validate --config
  push_ark_nova_stats:
    needs: build
    if: ${{ github.ref == 'refs/heads/main' }}
    concurrency:
      group: ark_nova_stats_dockerhub
      cancel-in-progress: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push to Docker Hub
        run: |
          bazel --bazelrc=.github/workflows/ci.bazelrc --bazelrc=.bazelrc run --build_tag_filters=manual --stamp --embed_label $(git rev-parse HEAD) //ark_nova_stats/api:api_image_image_dockerhub
          bazel --bazelrc=.github/workflows/ci.bazelrc --bazelrc=.bazelrc run --build_tag_filters=manual --stamp --embed_label $(git rev-parse HEAD) //ark_nova_stats/game_server/main:image_grpc_dockerhub
          bazel --bazelrc=.github/workflows/ci.bazelrc --bazelrc=.bazelrc run --build_tag_filters=manual --stamp --embed_label $(git rev-parse HEAD) //ark_nova_stats/frontend:production_cross_platform_image_dockerhub
          bazel --bazelrc=.github/workflows/ci.bazelrc --bazelrc=.bazelrc run --build_tag_filters=manual --stamp --embed_label $(git rev-parse HEAD) //ark_nova_stats/worker:worker_image_dockerhub
  deploy_ark_nova_stats:
    needs:
      - push_ark_nova_stats
      - validate-fly
    if: ${{ github.ref == 'refs/heads/main' }}
    concurrency:
      group: ark_nova_stats_production
      cancel-in-progress: false
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      # - name: Deploy API
      #   run: flyctl deploy
      #   working-directory: ark_nova_stats/api
      # - name: Deploy frontend
      #   run: flyctl deploy
      #   working-directory: ark_nova_stats/frontend
      # - name: Deploy worker
      #   run: flyctl deploy
      #   working-directory: ark_nova_stats/worker
  push_fitbit_challenges:
    needs: build
    if: ${{ github.ref == 'refs/heads/main' }}
    concurrency:
      group: fitbit_challenges_dockerhub
      cancel-in-progress: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push to Docker Hub
        run: |
          bazel --bazelrc=.github/workflows/ci.bazelrc --bazelrc=.bazelrc run --build_tag_filters=manual --stamp --embed_label $(git rev-parse HEAD) //fitbit_challenges/api:api_image_image_dockerhub
          bazel --bazelrc=.github/workflows/ci.bazelrc --bazelrc=.bazelrc run --build_tag_filters=manual --stamp --embed_label $(git rev-parse HEAD) //fitbit_challenges/worker:worker_image_dockerhub
          bazel --bazelrc=.github/workflows/ci.bazelrc --bazelrc=.bazelrc run --build_tag_filters=manual --stamp --embed_label $(git rev-parse HEAD) //fitbit_challenges/frontend:production_cross_platform_image_dockerhub
  # deploy_fitbit_challenges:
  #   needs:
  #     - push_fitbit_challenges
  #     - validate-fly
  #   if: ${{ github.ref == 'refs/heads/main' }}
  #   concurrency:
  #     group: fitbit_challenges_production
  #     cancel-in-progress: false
  #   env:
  #     FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: superfly/flyctl-actions/setup-flyctl@master
  #     - name: Deploy API
  #       run: flyctl deploy
  #       working-directory: fitbit_challenges/api
  #     - name: Deploy frontend
  #       run: flyctl deploy
  #       working-directory: fitbit_challenges/frontend
  #     - name: Deploy worker
  #       run: flyctl deploy
  #       working-directory: fitbit_challenges/worker
  deploy_golink:
    needs:
      - build
      - validate-fly
    if: ${{ github.ref == 'refs/heads/main' }}
    concurrency:
      group: golink_production
      cancel-in-progress: false
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy
        run: flyctl deploy
        working-directory: golink
  deploy_readeck:
    needs:
      - build
      - validate-fly
    if: ${{ github.ref == 'refs/heads/main' }}
    concurrency:
      group: readeck_production
      cancel-in-progress: false
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy
        run: flyctl deploy
        working-directory: readeck
  push_home_api:
    needs: build
    if: ${{ github.ref == 'refs/heads/main' }}
    concurrency:
      group: home_api_dockerhub
      cancel-in-progress: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push to Docker Hub
        run: |
          bazel --bazelrc=.github/workflows/ci.bazelrc --bazelrc=.bazelrc run --build_tag_filters=manual --stamp --embed_label $(git rev-parse HEAD) //home_api/api:api_image_image_dockerhub
          bazel --bazelrc=.github/workflows/ci.bazelrc --bazelrc=.bazelrc run --build_tag_filters=manual --stamp --embed_label $(git rev-parse HEAD) //home_api/frontend:production_cross_platform_image_dockerhub
  push_mc_manager:
    needs: build
    if: ${{ github.ref == 'refs/heads/main' }}
    concurrency:
      group: mc_manager_dockerhub
      cancel-in-progress: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push to Docker Hub
        run: |
          bazel --bazelrc=.github/workflows/ci.bazelrc --bazelrc=.bazelrc run --build_tag_filters=manual --stamp --embed_label $(git rev-parse HEAD) //mc_manager/api:api_image_image_dockerhub
          bazel --bazelrc=.github/workflows/ci.bazelrc --bazelrc=.bazelrc run --build_tag_filters=manual --stamp --embed_label $(git rev-parse HEAD) //mc_manager/worker:image_dockerhub
          bazel --bazelrc=.github/workflows/ci.bazelrc --bazelrc=.bazelrc run --build_tag_filters=manual --stamp --embed_label $(git rev-parse HEAD) //mc_manager/frontend:production_cross_platform_image_dockerhub
  build_blog:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.123.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build site
        run: bazel --bazelrc=.github/workflows/ci.bazelrc --bazelrc=.bazelrc build //blog:site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./bazel-bin/blog/site
  deploy_blog:
    if: ${{ github.ref == 'refs/heads/main' }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build_blog
    # Allow one concurrent deployment
    concurrency:
      group: "pages"
      cancel-in-progress: true
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
