# This is a basic workflow to help you get started with Actions

name: Dockerhub

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  schedule:
    - cron: '0 10 * * *' # everyday at 10am
  push:
    branches: master
    tags:
      - v*

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    -
      name: Set up Docker Buildx
      uses: crazy-max/ghaction-docker-buildx@v3
    -
      name: Cache Docker layers
      uses: actions/cache@v2
      id: cache
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    -
      name: Prepare API build
      id: prepare_api
      run: |
        DOCKER_IMAGE=shaldengeki/home-api
        DOCKER_PLATFORMS=linux/amd64,linux/arm64
        VERSION=edge

        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        if [ "${{ github.event_name }}" = "schedule" ]; then
          VERSION=nightly
        fi

        TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"
        if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          TAGS="$TAGS --tag ${DOCKER_IMAGE}:latest"
        fi

        echo ::set-output name=docker_image::${DOCKER_IMAGE}
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --cache-to "type=local,dest=/tmp/.buildx-cache" \
          --build-arg VERSION=${VERSION} \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=${GITHUB_SHA::8} \
          ${TAGS} --file ./api/Dockerfile ./api
    -
      name: Prepare frontend build
      id: prepare_frontend
      run: |
        DOCKER_IMAGE=shaldengeki/home-frontend
        DOCKER_PLATFORMS=linux/amd64,linux/arm64
        VERSION=edge

        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        if [ "${{ github.event_name }}" = "schedule" ]; then
          VERSION=nightly
        fi

        TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"
        if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          TAGS="$TAGS --tag ${DOCKER_IMAGE}:latest"
        fi

        echo ::set-output name=docker_image::${DOCKER_IMAGE}
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --cache-to "type=local,dest=/tmp/.buildx-cache" \
          --build-arg VERSION=${VERSION} \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=${GITHUB_SHA::8} \
          ${TAGS} --file ./frontend/Dockerfile ./frontend
    -
      name: Build API image
      run: |
        docker buildx build --output "type=image,push=false" ${{ steps.prepare_api.outputs.buildx_args }}
    -
      name: Build frontend image
      run: |
        docker buildx build --output "type=image,push=false" ${{ steps.prepare_Frontend.outputs.buildx_args }}
    -
      name: Log in to DockerHub
      if: success()
      env:
        DOCKER_USERNAME: shaldengeki
        DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login --username "shaldengeki" --password-stdin
    -
      name: Push API image to DockerHub
      if: success()
      run: |
        docker buildx build --output "type=image,push=true" ${{ steps.prepare_api.outputs.buildx_args }}
    -
      name: Check API manifest
      if: always()
      run: |
        docker run --rm mplatform/mquery ${{ steps.prepare_api.outputs.docker_image }}:${{ steps.prepare_api.outputs.version }}
    -
      name: Push frontend image to DockerHub
      if: success()
      run: |
        docker buildx build --output "type=image,push=true" ${{ steps.prepare_frontend.outputs.buildx_args }}
    -
      name: Check frontend manifest
      if: always()
      run: |
        docker run --rm mplatform/mquery ${{ steps.prepare_frontend.outputs.docker_image }}:${{ steps.prepare_frontend.outputs.version }}
    -
      name: Clear
      if: always()
      run: |
        rm -f ${HOME}/.docker/config.json
