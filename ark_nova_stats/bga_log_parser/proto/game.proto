syntax = "proto3";

enum ActionCard {
    ACTIONCARD_UNKNOWN = 0;
    ACTIONCARD_ANIMALS = 1;
    ACTIONCARD_ASSOCIATION = 2;
    ACTIONCARD_BUILD = 3;
    ACTIONCARD_CARDS = 4;
    ACTIONCARD_SPONSORS = 5;
}

message PlayAnimal {
    int32 card_id = 1;
    PlayBuilding enclosure = 2;
}

message AnimalsAction {
    repeated PlayAnimal animals = 1;
}

message BuildingCoordinate {
    int32 x = 1;
    int32 y = 2;
}

enum BuildingType {
    BUILDINGTYPE_UNKNOWN = 0;
    BUILDINGTYPE_PAVILION = 1;
    BUILDINGTYPE_KIOSK = 2;
    BUILDINGTYPE_ENCLOSURE = 3;
    BUILDINGTYPE_REPTILE_HOUSE = 4;
    BUILDINGTYPE_AVIARY = 5;
    // TODO: unique buildings
}

message PlayBuilding {
    int32 size = 1;
    BuildingType type = 2;
    repeated BuildingCoordinate coordinates = 3;
}

message BuildAction {
    repeated PlayBuilding builds = 2;
}

message BreakSponsor {}

message PlaySponsor {
    int32 card_id = 1;
    optional PlayBuilding building = 2;
}

message PlaySponsors {
    repeated PlaySponsor play_sponsor = 1;
}

message SponsorsAction {
    oneof action {
        BreakSponsor break = 1;
        PlaySponsors play_sponsors = 2;
    }
}

message AssociateReputation {}

enum PartnerZoo {
    PARTNERZOO_UNKNOWN = 0;
    PARTNERZOO_AFRICA = 1;
    PARTNERZOO_AMERICAS = 2;
    PARTNERZOO_ASIA = 3;
    PARTNERZOO_AUSTRALIA = 4;
    PARTNERZOO_EUROPE = 5;
}

enum University {
    UNIVERSITY_UNKNOWN = 0;
    TWO_SCIENCE = 1;
    SCIENCE_TWO_REPUTATION = 2;
    REPUTATION_HAND_SIZE = 3;
}

message AssociatePartnerZoo {
    PartnerZoo partner_zoo = 1;
}

message AssociateUniversity {
    University university = 1;
}

// TODO: change these to separate types and a oneof,
// because some of these require further player choices,
// like snapping, clever, university, buildings, etc
enum ConservationProjectRecurringReward {
    CONSERVATIONPROJECTRECURRINGREWARD_UNKNOWN = 0;
    CONSERVATIONPROJECTRECURRINGREWARD_SNAPPING = 1;
    CONSERVATIONPROJECTRECURRINGREWARD_BUILD_TWO_SIZE = 2;
    CONSERVATIONPROJECTRECURRINGREWARD_FIVE_INCOME = 3;
    CONSERVATIONPROJECTRECURRINGREWARD_TWO_CLEVERS = 4;
    CONSERVATIONPROJECTRECURRINGREWARD_TWO_POUCH = 5;
    CONSERVATIONPROJECTRECURRINGREWARD_ONE_CONSERVATION_POINT = 6;
    CONSERVATIONPROJECTRECURRINGREWARD_BUY_SPONSOR = 7;
}

enum ConservationProjectOneTimeReward {
    CONSERVATIONPROJECTONETIMEREWARD_UNKNOWN = 0;
    CONSERVATIONPROJECTONETIMEREWARD_ASSOCIATION_WORKER = 1;
    CONSERVATIONPROJECTONETIMEREWARD_TWELVE_MONEY = 2;
    CONSERVATIONPROJECTONETIMEREWARD_THREE_X = 3;
    CONSERVATIONPROJECTONETIMEREWARD_UNIVERSITY = 4;
    CONSERVATIONPROJECTONETIMEREWARD_AVIARY_REPTILE_HOUSE = 5;
    CONSERVATIONPROJECTONETIMEREWARD_DETERMINATION = 6;
    CONSERVATIONPROJECTONETIMEREWARD_TWO_REPUTATION = 7;
    CONSERVATIONPROJECTONETIMEREWARD_ONE_CONSERVATION_POINT = 8;
    CONSERVATIONPROJECTONETIMEREWARD_PARTNER_ZOO = 9;
    CONSERVATIONPROJECTONETIMEREWARD_GEOGRAPHICAL_BONUS = 10;
}

message ExtraWorker {}

message ThreeSizeEnclosure {
    repeated BuildingCoordinate coordinates = 3;
}

message TwoReputation {}

message FiveMoney {}

message TenMoney {}

message ThreeX {}

message DrawThree {
    repeated DrawCard draws = 1;
}

message TimesTwoMultiplier {
    ActionCard action = 1;
}

message BuySponsorFromHand {
    int32 card_id = 1;
}

message ConservationTrackReward {
    int32 track_position = 1;
    oneof reward {
        ActionCard upgrade_action = 2;
        ExtraWorker extra_worker = 3;
        University university = 4;
        PartnerZoo partner_zoo = 5;
        ThreeSizeEnclosure three_size_enclosure = 6;
        TwoReputation two_reputation = 7;
        FiveMoney five_money = 8;
        TenMoney ten_money = 9;
        ThreeX three_x = 10;
        DrawThree draw_three = 11;
        TimesTwoMultiplier times_two_multiplier = 12;
        BuySponsorFromHand buy_sponsor_from_hand = 13;
    }
}

message AssociateConservationProject {
    int32 card_id = 1;
    int32 strength = 2;

    oneof project_reward {
        ConservationProjectOneTimeReward one_time_reward = 3;
        ConservationProjectRecurringReward recurring_reward = 4;
    }

    repeated ConservationTrackReward track_rewards = 5;
}

message AssociationAction {
    int32 workers = 1;

    oneof action {
        AssociateReputation reputation = 2;
        AssociatePartnerZoo partner_zoo = 3;
        AssociateUniversity university = 4;
        AssociateConservationProject conservation_project = 5;
    }
}

message DrawCardFromDeck {}

message DrawCardFromDisplay {
    int32 display_position = 1;
    int32 card_id = 2;
}

message DrawCard {
    oneof action {
        DrawCardFromDeck deck_draw = 1;
        DrawCardFromDisplay display_draw = 2;
    }
}

message DiscardCard {
    int32 card_id = 3;
}

message CardsAction {
    repeated DrawCard draws = 1;
    repeated DiscardCard discards = 2;
}

message XAction {}

message SellCard {
    int32 card_id = 1;
}

message ExtraAction {
    oneof action {
        SellCard sell_card = 1;
    }
}

message Action {
    // Corresponds to a single player turn.

    int32 break_num = 1;
    int64 player_id = 2;
    int32 strength = 3;

    oneof action {
        XAction x = 4;
        AnimalsAction animals = 5;
        BuildAction build = 6;
        SponsorsAction sponsors = 7;
        AssociationAction associate = 8;
        CardsAction cards = 9;
    }

    repeated ExtraAction extra_actions = 10;
}

message Round {
    // Corresponds to the actions taken up to a break.

    repeated Action actions = 1;
    // TODO: break rewards.
}

message GameAbandon {}

message GameTie {}

message GameEndResult {
    int32 rank = 1;
    int64 player_id = 2;
}

message GameEnd {
    GameEndResult result = 1;
}

message Game {
    int64 table_id = 1;

    oneof result {
        GameAbandon abandon = 2;
        GameTie tie = 3;
        GameEnd end = 4;
    }

    repeated int64 player_ids = 5;
    repeated Round rounds = 6;
}
