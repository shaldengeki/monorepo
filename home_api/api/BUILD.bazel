load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@py_deps//:requirements.bzl", "requirement")
load("@rules_oci//oci:defs.bzl", "oci_push", "oci_tarball")
load("@rules_python//python:defs.bzl", "py_binary", "py_library")
load("//tools/build_rules:py_layer.bzl", "py_oci_image")

py_library(
    name = "config_py",
    srcs = ["config.py"],
    visibility = ["//home_api:__subpackages__"],
    deps = [
        requirement("Flask"),
        requirement("flask_cors"),
        requirement("flask_migrate"),
        requirement("flask_sqlalchemy"),
        requirement("pg8000"),
    ],
)


py_library(
    name = "api_lib",
    srcs = glob(["**/*.py"]),
    data = [
        requirement("pg8000"),
    ],
    imports = [".."],
    visibility = ["//home_api/api:__subpackages__"],
    deps = [
        "//home_api/api:config_py",
        "//home_api/api/models:transaction_py",
        requirement("Flask"),
        requirement("flask_cors"),
        requirement("flask_migrate"),
        requirement("flask_sqlalchemy"),
        requirement("graphql_server"),
        requirement("pg8000"),
    ],
)

py_binary(
    name = "binary",
    srcs = ["__main__.py"],
    imports = [".."],
    main = "__main__.py",
    deps = [
        ":api_lib",
        "//scripts:wait_for_postgres",
    ],
)

py_oci_image(
    name = "image",
    base = "@python3_image",
    binary = ":binary",
    cmd = [
        "/home_api/api/binary.runfiles/_main/scripts/wait_for_postgres",
        "/home_api/api/binary",
    ],
    env = {
        "FLASK_APP": "app.py",
        "FLASK_DEBUG": "True",
        "API_PORT": "5000",
        "FRONTEND_PROTOCOL": "http",
        "FRONTEND_HOST": "frontend",
        "FRONTEND_PORT": "5001",
        "DB_HOST": "pg",
        "DB_USERNAME": "admin",
        "DB_PASSWORD": "development",
        "DATABASE_NAME": "api_development",
        "FLASK_SECRET_KEY": "testing",
    },
    visibility = ["//home_api/api:__subpackages__"],
)

platform(
    name = "aarch64_linux",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

platform(
    name = "x86_64_linux",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

platform_transition_filegroup(
    name = "platform_image",
    srcs = [":image"],
    target_platform = select({
        "@platforms//cpu:arm64": ":aarch64_linux",
        "@platforms//cpu:x86_64": ":x86_64_linux",
    }),
)

# $ bazel run //home_api/api:tarball
# $ docker run --rm shaldengeki/home-api-api:latest
oci_tarball(
    name = "tarball",
    image = ":platform_image",
    repo_tags = ["shaldengeki/home-api-api:latest"],
)

oci_push(
    name = "dockerhub",
    image = ":platform_image",
    remote_tags = "//:stamped",
    repository = "docker.io/shaldengeki/home-api-api",
)
