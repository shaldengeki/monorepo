# This is a basic workflow to help you get started with Actions

name: Dockerhub

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  schedule:
    - cron: '0 10 * * *' # everyday at 10am
  push:
    branches: main
  pull_request:
    branches: [ main ]
  release:
    types:
      - created

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    -
      name: Prepare API build
      id: prepare_api
      run: |
        DOCKER_IMAGE=shaldengeki/mc-manager-api
        DOCKER_PLATFORMS=linux/amd64,linux/arm64
        VERSION=edge

        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        if [ "${{ github.event_name }}" = "schedule" ]; then
          VERSION=nightly
        fi

        TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"
        if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          TAGS="$TAGS --tag ${DOCKER_IMAGE}:latest"
        fi
        echo "Building image with tags: ${TAGS}"

    -
      name: Build API image
      run: |
        docker build ${TAGS} --file ./api/Dockerfile ./api

    -
      name: Login to DockerHub
      if: success()
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    -
      name: Push API image to DockerHub
      if: success()
      run: |
        docker push ${TAGS}

    -
      name: Check API manifest
      if: always()
      run: |
        docker run --rm mplatform/mquery ${DOCKER_IMAGE}:${VERSION}
    -
      name: Clear
      if: always()
      run: |
        rm -f ${HOME}/.docker/config.json
